name: Sign MSI with Azure Trusted Signing

on:
  push:
    branches:
      - develop

jobs:
  sign-msi:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: List files in the workspace (for debugging)
        run: Get-ChildItem -Path ${{ github.workspace }} -Recurse

      - name: Create Signing Catalog file
        run: |
           echo "pdmcli.msi" > catalog.txt  # Replace with your MSI filename

      - name: Sign MSIX using Azure Trusted Signing
        uses: azure/trusted-signing-action@v0.3.16
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://wus2.codesigning.azure.net/  # Change if using a different region
          code-signing-account-name: BLUE-BYTE-SYSTEMS-INC
          certificate-profile-name: certificate
          files-catalog: ${{ github.workspace }}\catalog.txt
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Verify Signature (PowerShell)
        run: |
          Get-AuthenticodeSignature -FilePath "pdmcli.msi"

      - name: Upload Signed MSIX as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-msi
          path: "pdmcli.msi"
          
      
  upload-msi:
    runs-on: ubuntu-latest
    needs: sign-msi
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Signed MSI from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: signed-msi
          path: ./  # Extracts it to the current working directory

      - name: List Downloaded Files (Debugging)
        run: ls -lah

      - name: Get Commit Message (Version Number)
        id: get_version
        run: echo "VERSION=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Define Root Path
        run: echo "SFTP_ROOT=/home/S8bt11tCw6zWQ7/html/wp-content/pdmshell_test" >> $GITHUB_ENV

      - name: Create Version Folder on SFTP (Using SSH)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: 22
          script: |
            mkdir -p "${{ env.SFTP_ROOT }}/${{ env.VERSION }}"
            ls -ld "${{ env.SFTP_ROOT }}/${{ env.VERSION }}"  # Verify folder creation

      - name: Upload Signed MSI To SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.5
        with:
          username: ${{ secrets.SFTP_USERNAME }}
          server: ${{ secrets.SFTP_HOST }}
          port: 22
          password: ${{ secrets.SFTP_PASSWORD }}
          local_path: "./pdmcli.msi"  # Ensure this points to the extracted MSI
          remote_path: "${{ env.SFTP_ROOT }}/${{ env.VERSION }}/pdmcli.msi"
          sftp_only: true
          sftpArgs: "-vvv"  # Enable verbose debugging output

      - name: Retrieve versions.txt from SFTP (using SSH)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: 22
          script: |
            FILE="${{ env.SFTP_ROOT }}/versions.txt"
            echo "Checking if versions.txt exists..."
            ls -lah "${{ env.SFTP_ROOT }}/"  # List directory contents
            if [ ! -f "$FILE" ]; then
              echo "Creating versions.txt as it does not exist."
              touch "$FILE"
            fi
            echo "Copying versions.txt to local workspace..."
            cat "$FILE" > versions.txt

      - name: Append New Version to versions.txt on SFTP
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: 22
          script: |
            VERSION_FILE="${{ env.SFTP_ROOT }}/versions.txt"
            
            echo "Appending version '${{ env.VERSION }}' to versions.txt..."
            
            # Ensure the file exists, then append the new version
            touch "$VERSION_FILE"
            echo "${{ env.VERSION }}" >> "$VERSION_FILE"
      
            echo "Updated versions.txt contents:"
            cat "$VERSION_FILE"  # Debugging step to verify contents
